import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/work_event.dart';

/// Service de gestion de la persistance des donn√©es
class StorageService {
  static const String _scheduleDataKey = 'schedule_data';

  /// Sauvegarde la liste des √©v√©nements
  Future<bool> saveScheduleData(List<WorkEvent> events) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonData = events.map((event) => event.toJson()).toList();
      final jsonString = json.encode(jsonData);

      final success = await prefs.setString(_scheduleDataKey, jsonString);

      if (success) {
        print('‚úÖ Sauvegarde r√©ussie: ${events.length} √©v√©nements');
      } else {
        print('‚ùå √âchec de la sauvegarde');
      }

      return success;
    } catch (e) {
      print('‚ùå Erreur lors de la sauvegarde: $e');
      return false;
    }
  }

  /// Charge la liste des √©v√©nements sauvegard√©s
  Future<List<WorkEvent>?> loadScheduleData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_scheduleDataKey);

      if (jsonString == null || jsonString.isEmpty) {
        print('‚ÑπÔ∏è Aucune donn√©e sauvegard√©e trouv√©e');
        return null;
      }

      final jsonData = json.decode(jsonString) as List<dynamic>;
      final events = jsonData
          .map((item) => WorkEvent.fromJson(item as Map<String, dynamic>))
          .toList();

      print('‚úÖ Chargement r√©ussi: ${events.length} √©v√©nements');
      return events;
    } catch (e) {
      print('‚ùå Erreur lors du chargement: $e');
      return null;
    }
  }

  /// V√©rifie si des donn√©es sont sauvegard√©es
  Future<bool> hasScheduleData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_scheduleDataKey);
      return jsonString != null && jsonString.isNotEmpty;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification des donn√©es: $e');
      return false;
    }
  }

  /// Efface toutes les donn√©es sauvegard√©es
  Future<bool> clearScheduleData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final success = await prefs.remove(_scheduleDataKey);

      if (success) {
        print('‚úÖ Donn√©es effac√©es avec succ√®s');
      } else {
        print('‚ùå √âchec de l\'effacement des donn√©es');
      }

      return success;
    } catch (e) {
      print('‚ùå Erreur lors de l\'effacement: $e');
      return false;
    }
  }

  /// Obtient la taille des donn√©es sauvegard√©es en octets
  Future<int> getStorageSize() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_scheduleDataKey);

      if (jsonString == null) return 0;

      return utf8.encode(jsonString).length;
    } catch (e) {
      print('‚ùå Erreur lors du calcul de la taille: $e');
      return 0;
    }
  }

  /// Sauvegarde un backup des donn√©es avec timestamp
  Future<bool> createBackup() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final currentData = prefs.getString(_scheduleDataKey);

      if (currentData == null) {
        print('‚ÑπÔ∏è Aucune donn√©e √† sauvegarder');
        return true;
      }

      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final backupKey = '${_scheduleDataKey}_backup_$timestamp';

      final success = await prefs.setString(backupKey, currentData);

      if (success) {
        print('‚úÖ Backup cr√©√©: $backupKey');
      }

      return success;
    } catch (e) {
      print('‚ùå Erreur lors de la cr√©ation du backup: $e');
      return false;
    }
  }

  /// Liste tous les backups disponibles
  Future<List<String>> listBackups() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();

      final backupKeys = keys
          .where((key) => key.startsWith('${_scheduleDataKey}_backup_'))
          .toList();

      // Trier par timestamp (plus r√©cent en premier)
      backupKeys.sort((a, b) {
        final timestampA = int.tryParse(a.split('_').last) ?? 0;
        final timestampB = int.tryParse(b.split('_').last) ?? 0;
        return timestampB.compareTo(timestampA);
      });

      print('‚ÑπÔ∏è ${backupKeys.length} backups trouv√©s');
      return backupKeys;
    } catch (e) {
      print('‚ùå Erreur lors de la liste des backups: $e');
      return [];
    }
  }

  /// Restaure un backup sp√©cifique
  Future<List<WorkEvent>?> restoreBackup(String backupKey) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final backupData = prefs.getString(backupKey);

      if (backupData == null) {
        print('‚ùå Backup non trouv√©: $backupKey');
        return null;
      }

      final jsonData = json.decode(backupData) as List<dynamic>;
      final events = jsonData
          .map((item) => WorkEvent.fromJson(item as Map<String, dynamic>))
          .toList();

      print('‚úÖ Backup restaur√©: ${events.length} √©v√©nements');
      return events;
    } catch (e) {
      print('‚ùå Erreur lors de la restauration: $e');
      return null;
    }
  }

  /// Nettoie les anciens backups (garde les 5 plus r√©cents)
  Future<void> cleanOldBackups({int keepCount = 5}) async {
    try {
      final backups = await listBackups();

      if (backups.length <= keepCount) {
        print('‚ÑπÔ∏è Aucun backup √† supprimer (${backups.length} <= $keepCount)');
        return;
      }

      final prefs = await SharedPreferences.getInstance();
      final toDelete = backups.skip(keepCount);

      for (final backupKey in toDelete) {
        await prefs.remove(backupKey);
        print('üóëÔ∏è Backup supprim√©: $backupKey');
      }

      print('‚úÖ Nettoyage termin√©: ${toDelete.length} backups supprim√©s');
    } catch (e) {
      print('‚ùå Erreur lors du nettoyage: $e');
    }
  }
}